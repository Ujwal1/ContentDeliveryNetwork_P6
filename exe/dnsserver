#!/usr/bin/env python3

import argparse
import socket
from dnslib import *
import subprocess
import re

HOST = 'cdn-dns.khoury.northeastern.edu'
PORT = 20520
EXPECTED_DOMAIN = 'cs5700cdnorigin.ccs.neu.edu'
REPLICA_SIZE = 7
REPLICA_SERVERS = [
    "cdn-http3.khoury.northeastern.edu", 
    "cdn-http4.khoury.northeastern.edu", 
    "cdn-http7.khoury.northeastern.edu", 
    "cdn-http11.khoury.northeastern.edu", 
    "cdn-http14.khoury.northeastern.edu", 
    "cdn-http15.khoury.northeastern.edu", 
    "cdn-http16.khoury.northeastern.edu"
]

class DNSServer:
    def __init__(self, name, port):
        self.name = name
        self.port = port
        self.i = 0 # index for replica servers for round-robin

    def run(self):
        # set up a socket with context manager, so s will be closed when interrupted
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s: # DNS uses UDP
            # s.bind((self.host, self.port))
            s.bind(('0.0.0.0', self.port)) # bind to all interfaces
            print(f'Server listening on {self.name}:{self.port}')
            # listen for requests
            while True:
                data, addr = s.recvfrom(1024)
                print("\nReceived request from", addr)
                try:
                    # parse/handle the request
                    self.handle_request(data, addr, sock=s)
                except Exception as e:
                    print("Error handling request:", e)
                    continue

    def handle_request(self, data, addr, sock):
        '''parse the request, resolve qname, and send response'''
        request = DNSRecord.parse(data)
        # only respond to A type requests
        if request.q.qtype == QTYPE.A:
        # if request.q.qtype == QTYPE.A and request.q.qname == EXPECTED_DOMAIN:
            self.send_response(request, addr, sock)
    
    
    def send_response(self, request, client_addr, sock):
        '''construct and send packed response back to client'''
        # resolve the requested domain 
        res_ip = self.get_server_ip(client_addr[0], request.q.qname)
        # construct response
        dns_res = request.reply() # a reply skeleton with id, flags, and question section filled
        dns_res.add_answer(RR(request.q.qname, QTYPE.A, rdata=A(res_ip), ttl=60))
        print("Response to send:\n", dns_res)
        # send response
        sock.sendto(dns_res.pack(), client_addr)


    # def get_server_ip(self, client_ip, qname):
    #     '''use round-robin for now to return one of the replica servers' IP address'''
    #     # looks like the requested domain is alway the same (from simulation only, actual test may vary)
    #     requested_domain = qname # for now; TODO: parse the requested domain and check if it's our ORIGIN_SERVER
    #     #TODO: use active measurement (maybe scamper) to find the best replica ip, 
    #     #TODO: can maybe add cache to store the best replica ip for each client as well
    #     replica_server = REPLICA_SERVERS[self.i]
    #     replica_ip = socket.gethostbyname(replica_server)
    #     self.i = (self.i + 1) % REPLICA_SIZE
    #     return replica_ip

    def get_server_ip(self, client_ip, qname):
        '''Use Scamper to measure latency to each replica server and select the server with the lowest latency'''
        self.get_ip_addresses_and_write_to_file(REPLICA_SERVERS, 'replica_ips.txt')

        min_latency = float('inf')
        best_server_ip = None
        
        command = f'scamper -c "ping -c 1" replica_ips.txt'
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        # print("RESULT: ", result)
        
        if result.returncode == 0:
            # Extract the best IP from the output
            best_ip, best_time = self.extract_min_time_ip(result.stdout)
            print("IP address with least average RTT:", best_ip)
            return best_ip
        else:
            print("Error executing command:", result.stderr)
                
        return best_server_ip

    def extract_min_time_ip(self, ping_output):
        """
        Extracts the IP address with the minimum round-trip time (RTT) from ping output.

        Args:
            ping_output: The string containing the ping results.

        Returns:
            A tuple containing the IP address with the minimum RTT and the minimum RTT, 
            or None if no successful pings were found.
        """
        # Split the output into individual ping results
        results = ping_output.split("\nping")

        # Initialize variables for tracking minimum
        min_time = float('inf')
        min_ip = None

        # Loop through each ping result
        for result in results[1:]:
            # Extract IP address and time from successful ping response
            match = re.search(r"(\d+)\s+bytes from (\d+\.\d+\.\d+\.\d+), seq=0", result)
            # print("HELLO12", result)
            if match:
                # print("Hello")
                packet_size = int(match.group(1))  # Extract packet size
                ip_address = match.group(2)
                
                # Extract time (assuming it's the last number before "ms")
                time_match = re.search(r"\d+\.\d+(?=\s+ms)", result)
                if time_match:
                    time = float(time_match.group())
                    # print("TIME IP:", time, ip_address)
                    # Update minimum if current time is lower
                    if time < min_time:
                        min_time = time
                        min_ip = ip_address

        return min_ip, min_time

    # Function to get IP addresses from hostnames
    def get_ip_addresses_and_write_to_file(self, hostnames, filename):
        with open(filename, 'w') as file:
            for hostname in hostnames:
                try:
                    ip_address = socket.gethostbyname(hostname)
                    file.write(ip_address + '\n')
                except socket.error as e:
                    print(f"Error resolving hostname {hostname}: {e}")


# to copy the file to the server from local machine: 
# scp -v -i priv_key_path file_to_copy username@cdn-dns.khoury.northeastern.edu:

# to run the server on the server machine:
# ssh into the server machine and run this program

# to test our dns server, use dig in terminal:
# dig @cdn-dns.khoury.northeastern.edu -p [port] cs5700cdn.example.com

def main():
    # usage: $ ./dnsserver [-p port] [-n name]
    parser = argparse.ArgumentParser(description='DNS Server')
    parser.add_argument('-p', type=int, help='port number', default=PORT)
    parser.add_argument('-n', type=str, help='name', default=HOST)
    args = parser.parse_args()

    server = DNSServer(args.n, args.p)
    server.run()

if __name__ == '__main__':
    main()
                