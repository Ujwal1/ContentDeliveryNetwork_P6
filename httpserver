#!/usr/bin/env python3

import argparse
import os
import sys
import socket
import pickle
import signal
import requests
from http.server import BaseHTTPRequestHandler, HTTPServer
from collections import OrderedDict

ORIGIN_SERVER = 'cs5700cdnorigin.ccs.neu.edu'
ORIGIN_SERVER_PORT = 8080
ORIGIN_BASE_URL = "http://cs5700cdnorigin.ccs.neu.edu:8080"
GRADING_PATH = '/grading/beacon'
MY_PORT = 20500

CACHE_MAX_SIZE = 10 * 1024 * 1024  # 10MB
DISK_CACHE_DIR = 'cache'

disk_records_is_set = False

class LRUCache():
    def __init__(self):
        self.disk_records = OrderedDict() # file_path -> content_size
        self.memory_cache = OrderedDict() # file_path -> content
        self.capacity = CACHE_MAX_SIZE
        self.disk_usage = 0 # cannot be updated directly, use __setitem__ to update
        self.memory_usage = 0

    def get(self, file_path):
        '''get the value of the key and move it to the end of the cache to mark it as most recently used'''
        content = None

        if file_path in self.memory_cache: # try memory cache first
            print(f"------ Fetched from memory")
            self.memory_cache.move_to_end(file_path)
            content = self.memory_cache[file_path]
        elif file_path in self.disk_records:
            print(f"------ Fetched from disk,putting into memory ...")
            self.disk_records.move_to_end(file_path)  # mark as most recently used
            content = fetch_from_disk(file_path) 
            # self.put(file_path, content) # laod to memory cache; call to this moved to after response sent
        
        return content

    def put(self, file_path, content):
        ''' Save the content to memory cache, if the cache is full, move LRU in memory to disk'''

        # just in case called on existing item
        if file_path in self.memory_cache:
            self.memory_cache.move_to_end(file_path) # mark as most recently used
            return

        content_size = len(content)
        self.memory_usage += content_size + len(file_path) # mark as saved in memory

        while self.memory_usage > self.capacity: # check capacity
            self.make_room_memory() 

        # save to memory
        self.memory_cache[file_path] = content 
        
        print(f"--- Put into memory done ---")
        self.print_status()
    
    def make_room_memory(self):
        '''Remove the least recently used item from the cache. If type is disk, remove the file from disk as well.'''
        # pop LRU from memory cache
        file_path, content = self.memory_cache.popitem(last=False) # remove the first item (least recently used)
        content_size = len(content)
        self.memory_usage -= content_size

        print(f"--- Made room in memory cache ---")
        self.print_status()

        # move to disk, make room if necessary
        while self.disk_usage + content_size > self.capacity:
            self.make_room_disk()
        self.save_to_disk(file_path, content, content_size) # update disk_records and disk_usage

    def make_room_disk(self):
        '''Remove LRU from disk, update disk_records and disk_usage'''
        file_path, content_size = self.disk_records.popitem(last=False) # remove the first item (least recently used)
        self.disk_usage -= content_size # update disk_usage, mark as removed

        # remove the file from disk
        if os.path.isfile(file_path):
            os.remove(file_path)
        
        print(f"--- Made room in disk cache ---")
        self.print_status()

    def save_to_disk(self, file_path, content, content_size):
        '''Save content to disk, record in disk_cache, and update disk_usage. 
        file_path format: /cache/2018_FIFA_World_Cup'''

        # record in disk_records
        self.disk_records[file_path] = content_size # mark as saved in disk
        self.disk_usage += content_size + len(file_path) # update disk_usage 

        # write actual content to disk
        directory = os.path.dirname(os.path.join('.', file_path))
        if not os.path.exists(directory):
            os.makedirs(directory)
        with open(file_path, 'wb') as file:
            file.write(content)

        print(f"--- Saved to disk ---")
        self.print_status()

    def print_status(self):
        '''print the current status of the cache'''
        print(f"------- Cache status -------")
        print(f"memory_cache count: {len(self.memory_cache)}")
        print(f"memory_usage: {self.memory_usage}")
        print(f"disk_records count: {len(self.disk_records)}")
        print(f"disk_usage: {self.disk_usage}")
        print(f"------- End of cache status -------")



class MyHTTPHandler(BaseHTTPRequestHandler):    
    # expected cache behavior: persist through requests, reset on program restart
    cache = LRUCache() # file_path -> content_size; 
    
    def __init__(self, request, client_address, server):
        '''invoked with every request, initialize the handler with the request, client address, and server instance'''
        self.load_cache_from_pickle() # load disk cache records from pickle

        BaseHTTPRequestHandler.__init__(self, request, client_address, server)

        print(f"--- After super.init() ---")
        self.cache.print_status()

    def do_GET(self):
        ''' overide method from BaseHTTPRequestHandler, invoked whenever a GET request is received'''
        # print request
        print(f"--------\nReceived request from {self.client_address[0]}:{self.client_address[1]} ")
        print(f"Request path: {self.path} \n--------\n") # /2018_FIFA_World_Cup

        # must respond to an HTTP request for the path /grading/beacon with a 204 status code
        if self.path == GRADING_PATH:
            self.send_response(204)
            self.end_headers()
            return
        
        # try get from memory or disk
        file_path = os.path.join(DISK_CACHE_DIR, self.path[1:])
        res_content = self.cache.get(file_path) # returns None if not in cache or disk

        # not in memory or disk, fetch from origin
        if not res_content: 
            res = fetch_from_origin(self.path)
            res_content = res.content

        # first construct response and send back to client
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.send_header('Content-length', len(res_content))
        self.end_headers()
        self.wfile.write(res_content)

        print(f"--- Response to {file_path} sent ---")

        # then cache the response, LRU will be updated if exists
        self.cache.put(file_path, res_content)
    
    def load_cache_from_pickle(self):
        '''load cache records from pickle file'''
        global disk_records_is_set

        if disk_records_is_set: # already set up
            return
        
        if os.path.isfile('data.pickle'):
            with open('data.pickle', 'rb') as file:
                self.cache = pickle.load(file)
                print(f"--- Loaded disk cache records from data.pickle ---")
                
        else:
            print(f"--- No disk cache records found, walk disk ---")
            self.walk_disk_cache()
        
        disk_records_is_set = True # mark cache as loaded

        self.cache.print_status()

    def walk_disk_cache(self):
        '''manually walk through the disk cache directory and set up disk_records in case of data.pickle missing'''

        if not os.path.exists(DISK_CACHE_DIR):
            return 0

        for root, dirs, files in os.walk(DISK_CACHE_DIR):
            for file in files:
                file_path = os.path.join(root, file)
                content_size = os.path.getsize(file_path)
                self.cache.disk_records[file_path] = content_size
                self.cache.disk_usage += content_size + len(file_path)
                # self.cache.put(file_path, fetch_from_disk(file_path)) # load content to memory cache

        print(f"--- Walked disk cache ---")

        
def fetch_from_disk(file_path):
    '''fetch the requested resource from the disk cache'''
    # file_path format: cache/2018_FIFA_World_Cup
    if os.path.isfile(file_path): #os.path.exists(file_path) and 
        print("--- Fetching from disk...")
        with open(file_path, 'rb') as file:
            content = file.read()
        return content

def fetch_from_origin(path):
    '''fetch the requested resource from the origin server'''
    url = ORIGIN_BASE_URL + path
    print(f"-------- \nFetching from origin: \n{url}\n-----------\n")
    response = requests.get(url)
    return response

def get_my_ip():
    '''get the local IP address of the server'''
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8", 80))
    ip = s.getsockname()[0]
    s.close()
    # print(f'\nServer IP address is {ip}\n')
    return ip

def save_data_on_exit(signal, frame):
    '''signal handler to save data to a pickle file before exiting'''

    with open('data.pickle', 'wb') as file:
        pickle.dump(MyHTTPHandler.cache, file)
    print("Process terminated. Cache object saved to pickle.")
    sys.exit(0)
    

# usage: $ ./httpserver [-p port] [-o origin]
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--port', type=int, default=MY_PORT, help='Port number to listen on')
    parser.add_argument('-o', '--origin', type=str, default=ORIGIN_SERVER, help='Origin server')
    args = parser.parse_args()

    # Register signal handler for termination signals from pkill
    signal.signal(signal.SIGTERM, save_data_on_exit)

    # create http server instance and start listening
    try:
        server_addr = (get_my_ip(), args.port)
        http_server = HTTPServer(server_addr, MyHTTPHandler)
        print(f'Server listening on port {args.port}')
        http_server.serve_forever()
    except KeyboardInterrupt:
        print("\nKeyboard interrupt")
        save_data_on_exit(None, None)
    finally:
        sys.exit(0)

if __name__ == '__main__':
    main()