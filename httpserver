#!/usr/bin/env python3

import argparse
import os
import sys
import socket
import http.client
import urllib.parse
import requests
from http.server import BaseHTTPRequestHandler, HTTPServer
from collections import OrderedDict

ORIGIN_SERVER = 'cs5700cdnorigin.ccs.neu.edu'
ORIGIN_SERVER_PORT = 8080
ORIGIN_BASE_URL = "http://cs5700cdnorigin.ccs.neu.edu:8080"
GRADING_PATH = '/grading/beacon'
MY_PORT = 20520

CACHE_MAX_SIZE = 10 * 1024 * 1024  # 10MB
TOTAL_DISK_SPACE = 2 * 1024 * 1024  # 10MB
DISK_CACHE_DIR = 'cache'

disk_cache_size = 0
disk_records_is_set = False

class LRUCache(OrderedDict):
    def __init__(self, max_size, cache_type='memory'):
        super().__init__()
        self.capacity = max_size
        self.used_space = 0 # cannot be updated directly, use __setitem__ to update
        self.type = cache_type

    def __getitem__(self, key):
        '''override; get the value of the key and move it to the end of the cache to mark it as most recently used'''
        self.move_to_end(key)  # Move accessed item to end to mark it as most recently used
        value = super().__getitem__(key)
        return value

    # def __setitem__(self, key, value):
    #     if key not in self:
    #         if len(self) >= self.max_size: # len(self) is the number of items in the cache, not the size
    #             self.popitem(last=False)  # Remove least recently used item (first item)
    #     super().__setitem__(key, value)
    #     self.move_to_end(key)  # Move/set item to end to mark it as most recently used

    def __setitem__(self, key, value) -> None:
        '''override; value is either actual content or content size. 
        Add key-value pair, make room if necessary, and update used_space.'''

        # If key exists, do not update value or used_space, assume value is always the same
        if key in self:
            self.move_to_end(key)  # Move/set item to end to mark it as most recently used
        else:
            content_size = len(value) if self.type == 'memory' else value
            self.used_space += content_size 
            while self.used_space > self.capacity:
                self.make_room()

        super().__setitem__(key, value) # maintains the order of insertion if key exists
        
        # print(f"--- used {self.type} LRUCache space: {self.used_space} ---\n")
        print(f"--- {self.type} LRUCache item count: {len(self)} ---\n")
    
    def make_room(self):
        '''Remove the least recently used item from the cache. If type is disk, remove the file from disk as well.'''
        global disk_cache_size

        if self.type == 'memory': # in memory cache
            file_path, file_content = self.popitem(last=False) # remove the first item (least recently used)
            self.used_space -= len(file_content)
        else: # disk cache
            file_path, content_size = self.popitem(last=False) 
            self.used_space -= content_size    
            # remove the file from disk
            if os.path.isfile(file_path):
                self.used_space -= content_size
                os.remove(file_path)

                disk_cache_size -= content_size # temp, update to check if used_space == disk_cache_size
                print(f"\n--- Removed {file_path} from disk_records and disk ---\n")


class MyHTTPHandler(BaseHTTPRequestHandler):    
    # expected cache behavior: persist through requests, reset on program restart
    disk_records = LRUCache(max_size=TOTAL_DISK_SPACE, cache_type='disk') # file_path -> content_size; 
    memory_cache = LRUCache(max_size=CACHE_MAX_SIZE) # file_path ("cache/file_name") -> actual file content
    
    def __init__(self, request, client_address, server):
        '''invoked with every request, initialize the handler with the request, client address, and server instance'''
        self.get_disk_usage() # set up disk_records, only read if disk_records is not set

        BaseHTTPRequestHandler.__init__(self, request, client_address, server)

        print(f"--- Disk cache count: {len(self.disk_records)} ---\n")
        print(f"--- Memory cache count: {len(self.memory_cache)} ---\n")

    def do_GET(self):
        ''' overide method from BaseHTTPRequestHandler, invoked whenever a GET request is received'''
        # print request
        print(f"--- Received request from {self.client_address[0]}:{self.client_address[1]} ---\n")
        print(f"--- Request path: {self.path} ---\n") # /2018_FIFA_World_Cup

        # must respond to an HTTP request for the path /grading/beacon with a 204 status code
        if self.path == GRADING_PATH:
            self.send_response(204)
            self.end_headers()
            return
        
        # try get from cache or disk
        file_path = os.path.join(DISK_CACHE_DIR, self.path[1:])
        res_content = self.get_cached_content(file_path) 

        if res_content is None: # not in cache or disk
            # fetch from origin
            res = fetch_from_origin(self.path)
            res_content = res.content

            # cache the response in memory
            self.save_to_memory(res_content)
            # or save to disk
            self.save_to_disk(file_path, res_content)
        
        # construct response and send back to client
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.send_header('Content-length', len(res_content))
        self.end_headers()
        self.wfile.write(res_content)

    def get_cached_content(self, file_path):
        '''get the response content from cache or disk'''
        # get from memory cache if exists
        if self.path in self.memory_cache:
            print("Retrieving from cache...")
            # cached_content = self.cache[self.path]
            cached_content = self.memory_cache.__getitem__(self.path)
            return cached_content
        
        # get from disk if exists, update LRU
        if file_path in self.disk_records:
            # update LRU order
            self.disk_records.__getitem__(file_path) # move to end, mark as most recently used
            return fetch_from_disk(file_path)

        return None
    
    def get_cache_usage(self):
        """Calculate the total size of cached content in memory_cache"""
        # return sum(len(content) for content in self.cache.values())
        return sum(len(content) for content in self.memory_cache.values())

    def get_disk_usage(self):
        """Calculate the total disk space used, should run once on start up to get disk cache size and set up disk_cache records"""
        global disk_cache_size, disk_records_is_set

        if disk_records_is_set: # already set up
            return disk_cache_size

        print(f"--- Getting disk usage ---\n")

        if not os.path.exists(DISK_CACHE_DIR):
            return 0

        # total_cache_size = sum(os.path.getsize(os.path.join('cache', f)) for f in os.listdir('cache') if os.path.isfile(os.path.join('cache', f)))

        # walk all files in ./cache recursively and record in disk_records
        for root, dirs, files in os.walk(DISK_CACHE_DIR):
            for name in files:
                file_path = os.path.join(root, name)
                file_size = os.path.getsize(file_path)
                print(f"--- walking through {file_path} ---")
                self.disk_records.__setitem__(file_path, file_size) # set up disk_records only, does not write to disk
                disk_cache_size += file_size            

        disk_records_is_set = True # mark disk_records as set
        print(f"\n --- Done walking disk, disk_cache_size: {disk_cache_size} ---")
        print(f" --- LRUCache disk_records usage: {self.disk_records.used_space} ---\n")

        return disk_cache_size

        
    def save_to_memory(self, content):
        '''cache the response content'''
        # Check if adding the content to cache exceeds size limit
        if len(content) <= CACHE_MAX_SIZE - self.get_cache_usage():
            print(" --- Caching to memory... ---\n")
            # self.cache[self.path] = content
            self.memory_cache.__setitem__(self.path, content)

    def save_to_disk(self, file_path, content):
        '''Save content to disk, record in disk_cache, and update disk_cache_size. 
        file_path format: /cache/2018_FIFA_World_Cup'''

        global disk_cache_size, disk_records_is_set

        # record in disk_records
        content_size = len(content)
        self.disk_records.__setitem__(file_path, content_size) # makes room on both disk_cache record and disk if necessary
        disk_cache_size += content_size

        # write content to disk
        directory = os.path.dirname(os.path.join('.', file_path))
        if not os.path.exists(directory):
            os.makedirs(directory)
        with open(file_path, 'wb') as file:
            file.write(content)


def fetch_from_disk(file_path):
    '''fetch the requested resource from the disk cache'''
    # file_path format: cache/2018_FIFA_World_Cup
    if os.path.isfile(file_path): #os.path.exists(file_path) and 
        print("--- Fetching from disk... \n")
        with open(file_path, 'rb') as file:
            content = file.read()
        return content

    return None

def fetch_from_origin(path):
    '''fetch the requested resource from the origin server'''
    url = ORIGIN_BASE_URL + path
    print(f"-------- Fetching from origin: {url}\n-----------\n")
    response = requests.get(url)
    return response


def get_my_ip():
    '''get the local IP address of the server'''
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8", 80))
    ip = s.getsockname()[0]
    s.close()
    # print(f'\nServer IP address is {ip}\n')
    return ip

# usage: $ ./httpserver [-p port] [-o origin]
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--port', type=int, default=MY_PORT, help='Port number to listen on')
    parser.add_argument('-o', '--origin', type=str, default=ORIGIN_SERVER, help='Origin server')
    args = parser.parse_args()


    # create a server instance
    server_addr = (get_my_ip(), args.port)
    http_server = HTTPServer(server_addr, MyHTTPHandler)
    # TODO: call get_disk_usage() to set up disk_records

    print(f'Server listening on port {args.port}')
    http_server.serve_forever()

if __name__ == '__main__':
    main()